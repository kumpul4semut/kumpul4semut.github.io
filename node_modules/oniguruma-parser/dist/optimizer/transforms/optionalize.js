"use strict";import{isAlternativeContainer as g,isQuantifiable as y}from"../../parser/node-utils.js";import{createQuantifier as m}from"../../parser/parse.js";import{isAllowedSimpleNode as d,isNodeEqual as v}from"./extract-prefix.js";const K={"*"({node:t}){if(!g(t)||t.body.length<2)return;const{body:i}=t,r=[i[0]];let a=i[0];for(let o=1;o<i.length;o++){const s=i[o],n=s.body,e=a.body,f=Math.abs(n.length-e.length);if(f){if(f===1){const p=e.length>n.length;let u=n,c=e;if(p?c=e.slice(0,-1):u=n.slice(0,-1),A(u,c)){if(p){const l=e.at(-1);if(l&&h(l)){e.pop(),e.push(m("greedy",0,1,l));continue}}else if(e.length>0||i.length===2){const l=n.at(-1);if(l&&h(l)){e.push(m("lazy",0,1,l));continue}}}}}else if(A(n,e))continue;r.push(s),a=s}t.body=r}};function h(t){return y(t)&&t.type!=="Quantifier"}function A(t,i){if(t.length!==i.length)return!1;for(let r=0;r<t.length;r++)if(!d(t[r])||!d(i[r])||!v(t[r],i[r]))return!1;return!0}export{K as optionalize};
//# sourceMappingURL=optionalize.js.map
